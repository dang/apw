#!/bin/bash
#
# Script that does something
#

PERCENT="%"

# Set usage output
USAGE="[-h |--help] (get-sink | get-volume | set-volume)"
LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t Commands
\tget-sink\n\t\tGet the currently active sink
\tget-volume\n\t\tGet the current volume
\tset-volume\n\t\tSet the current volume
\tget-mute\n\t\tGet the current mute status
\tset-mute\n\t\tSet the current mute status
"

# Standard functions
source ${SCRIPTS}/functions.sh

# Script name
ME=$(basename $0)

# Parse arguments
ARGS=`getopt -o +h --long help -n "${ME}" -- "$@"`

if [ $? != 0 ] ; then
	usage
fi
eval set -- "$ARGS"

while true ; do
	case "$1" in
		-h|--help) usage; shift ;;
		--) shift ; break ;;
		* ) usage "Invalid argument $1";;
	esac
done

#
# Opts processing for sub-commands
#

opts_get_sink() {
	local ME="${ME} ${COMMAND}"
	local USAGE="[-h |--help]"
	local LONGUSAGE="\t-h, --help\n\t\tPrint this help message

\tGet the name of the currenly active sink.
"
	local SUBARGS=""
	SUBARGS=`getopt -o h --long help -n "${ME}" -- "$@"`
	if [ $? != 0 ] ; then
		usage "invalid arguments"
	fi
	eval set -- "$SUBARGS"

	while true ; do
		case "$1" in
			-h|--help) usage; shift ;;
			--) shift ; break ;;
			* ) usage "Invalid argument $1" ;;
		esac
	done
}

opts_get_volume() {
	local ME="${ME} ${COMMAND}"
	local USAGE="[-h |--help] [-p | --percent] [-a | --absolute]"
	local LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-p, --percent\n\t\tReturn volume as a percentage (default)
\t-a, --absolute\n\t\tReturn volume as an absolute value

\tGet the current volume of the current sink
"
	local SUBARGS=""
	SUBARGS=`getopt -o hpa --long help,percent,absolute -n "${ME}" -- "$@"`
	if [ $? != 0 ] ; then
		usage "invalid arguments"
	fi
	eval set -- "$SUBARGS"

	while true ; do
		case "$1" in
			-h|--help) usage; shift ;;
			-p|--percent) PERCENT="%"; shift ;;
			-a|--absolute) PERCENT=""; shift ;;
			--) shift ; break ;;
			* ) usage "Invalid argument $1" ;;
		esac
	done
}

opts_set_volume() {
	local ME="${ME} ${COMMAND}"
	local USAGE="[-h |--help] [-p | --percent] [-a | --absolute] <volume>"
	local LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-p, --percent\n\t\tSet volume as a percentage (default)
\t-a, --absolute\n\t\tSet volume as an absolute value
\t<volume>\n\t\tVolume to set to.  Can be prefixed with + or - to change relative volume

\tSet the volume of the current sink
"
	local SUBARGS=""
	SUBARGS=`getopt -o hpa --long help,percent,absolute -n "${ME}" -- "$@"`
	if [ $? != 0 ] ; then
		usage "invalid arguments"
	fi
	eval set -- "$SUBARGS"

	while true ; do
		case "$1" in
			-h|--help) usage; shift ;;
			-p|--percent) PERCENT="%"; shift ;;
			-a|--absolute) ABSOLUTE=""; shift ;;
			--) shift ; break ;;
			* ) usage "Invalid argument $1" ;;
		esac
	done
	VOLUME="${1}"
	if [ -z "${VOLUME}" ]; then
		usage "Must give volume"
	fi
	if (( ${VOLUME} > 100 )); then
		echo "setting $VOLUME to 100"
		VOLUME=100
	fi
}

opts_get_mute() {
	local ME="${ME} ${COMMAND}"
	local USAGE="[-h |--help]"
	local LONGUSAGE="\t-h, --help\n\t\tPrint this help message

\tGet the current mute status of the current sink
"
	local SUBARGS=""
	SUBARGS=`getopt -o h --long help -n "${ME}" -- "$@"`
	if [ $? != 0 ] ; then
		usage "invalid arguments"
	fi
	eval set -- "$SUBARGS"

	while true ; do
		case "$1" in
			-h|--help) usage; shift ;;
			--) shift ; break ;;
			* ) usage "Invalid argument $1" ;;
		esac
	done
}

opts_set_mute() {
	local ME="${ME} ${COMMAND}"
	local USAGE="[-h |--help] [-t | --toggle] [<status>]"
	local LONGUSAGE="\t-h, --help\n\t\tPrint this help message
\t-t, --toggle\n\t\tToggle the mute status
\t<status>\n\t\t1 to mute, 0 to unmute

\tSet the mute status of the current sink
"
	local SUBARGS=""
	SUBARGS=`getopt -o ht --long help,toggle -n "${ME}" -- "$@"`
	if [ $? != 0 ] ; then
		usage "invalid arguments"
	fi
	eval set -- "$SUBARGS"

	while true ; do
		case "$1" in
			-h|--help) usage; shift ;;
			-t|--toggle) MUTE_STATUS="toggle"; shift ;;
			--) shift ; break ;;
			* ) usage "Invalid argument $1" ;;
		esac
	done
	if [ -z "${MUTE_STATUS}" ]; then
		MUTE_STATUS="${1}"
	fi
	case "${MUTE_STATUS}" in
		"0") ;;
		"1") ;;
		"toggle") ;;
		"") usage "Must give either --toggle or (0|1)" ;;
		* ) usage "Unknown <status> ${MUTE_STATUS}" ;;
	esac
}

# Now get the subcommand.  It will be in $1.
COMMAND=$1; shift
case "${COMMAND}" in
	"get-sink")	opts_get_sink "$@" ;;
	"get-volume")	opts_get_volume "$@" ;;
	"set-volume")	opts_set_volume "$@" ;;
	"get-mute")	opts_get_mute "$@" ;;
	"set-mute")	opts_set_mute "$@" ;;
	"") usage "Must give a command" ;;
	* ) usage "Unknown command ${COMMAND}" ;;
esac

# get_sink sink
#
# Result will be in local variable sink  Or:
#
# ink = $(get_sink)
#
# Result will be in local variable sink
#
# Get the currently active sink
get_sink() {
	local  __resultvar=$1
	local __sink=""

	__sink=$(pactl list short sinks | sed -e 's,^\([0-9][0-9]*\)[^0-9].*,\1,' | tail -n1)

	if [[ "$__resultvar" ]]; then
		eval $__resultvar="'$__sink'"
	else
		echo "$__sink"
	fi
}

# Command functions
cmd_get_sink() {
	local sink=$(get_sink)

	echo ${sink}
}

cmd_get_volume() {
	local sink=$(get_sink)
	local volume=""

	volume=$( pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( $sink + 1 )) | tail -n 1 | sed -e "s,.* \([0-9][0-9]*\)${PERCENT} .*,\1," )

	echo ${volume}
}

cmd_set_volume() {
	local sink=$(get_sink)

	pactl set-sink-volume ${sink} ${VOLUME}${PERCENT}
}

cmd_get_mute() {
	local sink=$(get_sink)
	local mute=""

	mute=$( pactl list sinks | grep '^[[:space:]]Mute:' | head -n $(( $sink + 1 )) | tail -n 1 | sed -e 's,Mute: ,,' )

	echo ${mute}
}

cmd_set_mute() {
	local sink=$(get_sink)

	pactl set-sink-mute ${sink} ${MUTE_STATUS}
}


# Run command
case "${COMMAND}" in
	"get-sink")	cmd_get_sink ;;
	"get-volume")	cmd_get_volume ;;
	"set-volume")	cmd_set_volume ;;
	"get-mute")	cmd_get_mute ;;
	"set-mute")	cmd_set_mute ;;
	* ) usage "Unknown command ${COMMAND}";;
esac
